プレイスメントグループは、単一のアベイラビリティーゾーン内のインスタンスを論理的にグループ化したものです。


クラシックロードバランサは、複数のAmazon EC2インスタンスにおける基本的な負荷分散を行うのに最適なロードバランサです。L4レイヤーで負荷分散するため、HTTPやHTTPS以外のTCPプロトコル上で動作するプロトコルにも対応することができます。ただし、 クラシックロードバランサは現在は使用を推奨されていません。
アプリケーションロードバランサは、HTTP / HTTPS トラフィックの負荷分散に最適なロードバランサです。Webサイトのロードバランサとして使用する場合はこのロードバランサが推奨されます。L7レイヤーで負荷分散します。高度なルーティング機能、マイクロサービス、およびコンテナベースのアーキテクチャが必要なアプリケーションに最適です。


エンドポイントには、HTTP/HTTPS、AWS Lambda、Eメール、SQS、SMS、モバイルプッシュ通知を利用することができます。
XMLは利用することができません。


Amazon EC2リソースにつける事の出来るタグには、以下のような基本制限があります。
・キーは最大128 文字まで。
・値は最大256 文字まで。
また、大文字と小文字は区別されます。1リソースあたりにつけることが出来るタグの最大数は 50個までです。



CloudFrontのオリジンサーバは、以下の３種類に分類することができます。
オリジンサーバとは、コンテンツを配信する元となっているサーバのことです。
①S3オリジン（バケット）
②S3オリジン（静的ホスティング）
③カスタムオリジン（カスタムオリジンとは一般的なWebサーバでありパブリックとプライベートの両方を扱うことができます。）



Auto ScalingでスケールアウトしたEC2インスタンスをスケールインする場合、デフォルトでは以下の順番で実行されます。
・インスタンス数（最も多いAZから優先）
・上記同条件の場合、起動設定が古いインスタンスがあるAZを優先
・起動設定が古いインスタンスが複数ある場合は、次の課金発生までの時間が最も短いインスタンスを優先
・次の課金発生までの時間が同じインスタンスが複数ある場合はランダム


VM Import/Export を使用すると簡単に、仮想マシンイメージを既存の環境から Amazon EC2 インスタンスにインポートしたり、オンプレミス環境にエクスポートしたりすることできます。この機能によって、元々持っていた仮想マシンを AWSに持ち込み、Amazon EC2 のインスタンスとしてすぐに使用できる状態とすることができます。これにより、IT セキュリティ・構成管理・コンプライアンス等、効率的に要件に合わせて仮想マシンを作成できます。
AWS Storage Gateway は、オンプレミスから実質無制限のクラウドストレージへのアクセスを提供するハイブリッドクラウドストレージサービスです。Storage Gateway を使用して、ストレージ管理を簡素化し主要なハイブリットクラウドストレージの仕組みを素早く構成することができるためコストを削減できます。
Snowball はセキュリティに考慮して設計されたデバイスを使用するペタバイト規模のデータ転送ソリューションで、AWS クラウド内外に大容量データを転送できます。




CloudFront では、GeoIP データベースを使い、地理的ディストリビューションの制限 機能を使うことができます、この機能を利用することで、ある国(地域)からのアクセスに対して 403 (アクセス拒否) のレスポンスを返すことが可能です。



AWS CLIを利用するために必要なものです。
・対象サービスの操作権限が付与されたIAMロール
・もしくはアクセスキーとシークレットアクセスキー
セキュリティの観点からアクセスキーでの認証より、IAMロールでの認証の方が適切と言えます。



「Kinesis Data Firehoseを利用してS3にログを蓄積し、Athenaを利用してログ解析を行う組み合わせ」が正解となります。 
Amazon Kinesis Data Firehose は、アクセスログなどのストリーミングデータを各種データストアにロードできます。蓄積場所としてはAmazon S3、Amazon Redshift、Amazon Elasticsearch Service、Splunk などがあり、設問の要件では大量ログをコスト効率よく蓄積するためS3を選択することが最適です。
Amazon Athena ではAmazon S3 内のデータを標準 SQL を使用して簡単に分析できます。



Aレコード：ドメイン名からIPアドレスを解決するのはAレコード
CNAMEレコード：ドメイン名から別のドメイン名を参照するレコード
MXレコード：対象ドメイン宛のメール配送先ホスト名を定義するレコード
NSレコード：DNSで定義されるそのドメインについての情報の種類の一つで、ドメインのゾーン情報を管理するDNSサーバを定義するレコード



Amazon S3 は、データセンターのディスクに書き込まれるときにデータをオブジェクトレベルで暗号化し、ユーザがデータにアクセスするときに復号します。リクエストが認証され、ユーザがアクセス許可を持っていれば、オブジェクトが暗号化されているかどうかに関係なく同じ方法でアクセスできます。たとえば、署名付き URL を使用してオブジェクトを表示する場合、オブジェクトが暗号化されているかどうかは関係ありません。また、バケット内のオブジェクトを一覧表示する場合においても、オブジェクトが暗号化されているかどうかに関係なく、すべてのオブジェクトを表示することができます。

Amazon S3 で保管時のデータを保護するには、以下のようなオプションがあります。
・サーバー側の暗号化を使用する
オブジェクトをデータセンター内のディスクに保存する前に暗号化し, オブジェクトをダウンロードするときに復号するように Amazon S3 にリクエストします。
・クライアント側の暗号化を使用する
クライアント側でデータを暗号化し、暗号化したデータを Amazon S3 にアップロードします。この場合、暗号化プロセス、暗号化キーはユーザ側で管理します。


API Gatewayはクライアントからリクエストを受け取ってそれをバックエンドに渡すし、バックエンドからレスポンスを受け取ってクライアントに返すし、プロキシのような働きを行います。
ウェブページはバックエンドサービスのドメインとは別のドメインにあるため、API Gateway で CORS を有効にします。これは、クロスオリジンコールであり、セキュリティのためにブラウザによって制限されています。ドメイン間リクエストを許可するには、API Gateway で CORS を有効にする必要があります。
API のリソースが API 自身のドメイン以外のドメインからリクエストを受信する場合、リソース上の選択されたメソッドのクロスオリジンリソース共有(CORS)を有効にする必要があります。



Amazon EBS 暗号化 は、EBS ボリュームのために、独自のキー管理インフラストラクチャの構築、管理、および保護を必要としない、簡単な暗号化ソリューションを提供します。暗号化された EBS ボリュームを作成し、サポートされるインスタンスタイプにアタッチする場合、以下のタイプのデータが暗号化されます。
・ボリューム内の保存データ
・ボリュームとインスタンスの間で移動されるすべてのデータ
・ボリュームから作成されたすべてのスナップショット
・それらのスナップショットから作成されたすべてのボリューム
暗号化オペレーションは EC2 インスタンスをホストするサーバー上で実行され、インスタンスとそれに接続された EBS ストレージ間でのデータの保存と転送中のデータの両方のセキュリティを保証します。



AWS CloudTrail は、AWS アカウントのガバナンス、コンプライアンス、運用監査、リスク監査を行うためのサービスです。クロスアカウントアクセスは AWSのIT ガバナンス(企業のIT資産の監視・規律を守る仕組み）を提供し、一括請求を使用して部門アカウントを親企業のマスターアカウントにリンクすることで、コストの監視が可能です。


サービスコントロールポリシー (SCP) は、AWSの子アカウントのアクセス権を制御することができます。
AWSのマスターアカウント管理者は、サービスコントロールポリシー (SCP) を使用して、組織内のメンバーアカウントのアクセス権限を設定できます。SCP を使用すると、各メンバーアカウントのユーザーとロールがどの AWS サービスリソースおよび個々の API アクションにアクセスできるかを制限することができます。AWS Organizations がメンバーアカウントのサービス、リソース、または API アクションへのアクセスをブロックすると、そのアカウントのユーザーまたはロ ールはアクセスできません。このブロックは、メンバーアカウントの管理者が IAM ポリシーで明示的にそのようなアクセス許可をした場合でも有効です。



AWS Data Pipeline は、データの移動と変換を自動化するサービスです。AWS Data Pipeline はデータ駆動型のワークフローを定義して、タスクの正常な完了をトリガーにして、次のタスクを実行できます。AWS Data Pipeline はDynamoDBに設定することが可能であり、定期的なデータ取得タスクを設定させることができます。

DynamoDBストリームを有効化することで、DynamoDBテーブルへのデータ登録や更新などのイベントをトリガーとして、Lambda関数などを実行して処理することができます。これにより、DynamoDBのデータを取得することも可能ですが、定期的にデータ取得するような処理ではなく、イベント起動になってしまうため、要件に合致していません。


EC２インスタンスがIAMデータベース認証を利用してDB インスタンスにアクセスが可能です。この認証方法では、DB インスタンスに接続するときにパスワードではなく、認証トークンを使用します。認証トークンはAmazon RDS がリクエストに応じて生成する一意の文字列であり、AWS 署名バージョン 4 を使用して生成されます。各トークンには 15 分の有効期間があります。認証トークンは IAM を使用して外部的に管理されるため、ユーザー認証情報をデータベースに保存する必要はありません。

このシナリオでは、EC2インスタンスにホストされたデータベースサーバーの書き込みパフォーマンスを向上させることが求められています。 これを実現するには、インスタンスボリュームに標準のRAID 0構成を設定するか、EC2インスタンスのサイズを大きくします。

RAID 0とは、複数のストレージ（外部記憶装置）をまとめて一台の装置のように管理するRAID技術の方式（RAIDレベル）の一つで、複数の装置に均等にデータを振り分け、並行して同時に記録することで読み書きを高速化することができます。したがって、オプション２が正解となります。


SAML（Security Assertion Markup Language）はインターネット上で、IDやパスワードなどの認証情報を連携するためのXMLベースの仕様です。SAMLは主にエンタープライズアプリケーション間の認証で使われています。SAMLはMicrosoft Active Directoryを使用しているため、AWSクラウドへのAPIアクセス用にSAMLベースのフェデレーションを設定できます。

AWS Single Sign-Onなどのサービスを利用することで、SAMLによる認証の仕組みを実現することが可能です。AWS SSO は SAML IdP 機能を AWS Managed Microsoft AD または AWS SSO ディレクトリに追加します。それにより、ユーザーは、AWS マネジメントコンソール やサードパーティー製アプリケーションなど、SAML をサポートするサービスへの SSO が可能になります。



AWS Elastic Beanstalk はECSなどのDocker サービスと連携して、容量のプロビジョニング、負荷の分散、スケーリング、およびアプリケーションの状態の監視の詳細を自動化することができます。したがって、オプション３が正解となります。

ECSはDocker形式でのアプリケーション開発環境を構築することができるオーケストレーションサービスです。これを利用してAWSリソースの展開は可能ですが、リソースのプロビジョニング、負荷分散、オートスケーリング、監視、クラスター全体でのコンテナ配置などのタスクの自動化にはElastic Beanstalkとの連携が必要です。


シンプルルーティングはドメインで特定の機能を実行する単一のリソースがある場合に使用します。シンプルルーティングではトラフィックを複数インスタンスなどに分散してルーティングして、ランダムに制御されます。


RDSのインスタンスタイプにおいてIOPS性能が高いタイプを選択して高性能な処理が行えるように設定することで、ランダムＩ／Ｏ遅延を防ぐことができます。また、必要に応じてリードレプリカを増強させるのも良いでしょう。

ElastiCacheは高速データ処理に向いていますが、NoSQL型のデータベースの代表的なAWSサービスです。こちらもリレーショナルデータベースとして利用することはできません。


Amazon Athenaを利用することでAmazon S3 から直接データに対してクエリ処理が可能となります。その際には実行するクエリに対してのみ料金が発生し、各クエリでスキャンされるデータ量に基づいて課金されます。データの圧縮、分割、列形式への変換を行うと、大幅なコスト削減とパフォーマンス向上を実現でき、データ処理コストを抑えることができます。

RDSは一般的なリレーショナルデータベースとしてデータを中長期処理するために利用されます。データ処理を行って、短期間でデータを削除するといったライフサイクル管理には向いていません。


サーバーサイド暗号化を使用すると、Amazon S3 はオブジェクトをデータセンター内のディスクに保存する前に暗号化し、オブジェクトをダウンロードするときにS3側で自動で復号します。

S3 バケットに対して暗号化キーによるサーバーサイド暗号化 を有効化すると、各アクセスログファイルは、S3 バケットに保存される前に自動的に暗号化され、アクセス時に復号されます。したがって、ログも自動で暗号化されるため、S3バケットの暗号化と別に設定する必要はありません。


SSE-S3はAmazon S3 で管理された暗号化キーにより実施されるサーバーサイド暗号化です。ユーザーがキーに対するアクセス管理はできませんが、署名バージョン4によりアクセス制限が設定され、所有者であるAWSアカウントID以外からのアクセスを拒否します。SSE-S3は暗号化と復号化をS3が自動で実施してくれるため最も管理に手間がかからない暗号化方式であり、要件に合致します。


DynamoDBはそのままではリードレプリカを増やすことができません。後述するDAX を有効化することで、DAXクラスターは、1 つのみのプライマリノードと、0～9 個のリードレプリカノードを構成することができます。


Amazon Kinesis Data Firehose はストリーミングデータをデータレイクやデータストア、分析ツールに配信するサービスです。ストリーミングデータをキャプチャして変換しつつ、Amazon S3、Amazon Redshift、Amazon Elasticsearch Serviceにロードします。DynamoDBに配信することはできません



Amazon ECS はELBのいずれかのタイプのロードバランサ―を使用できます。Application Load Balancer は、HTTP/HTTPS (またはレイヤー 7) トラフィックをルーティングするために使用されます。Network Load Balancer と Classic Load Balancer は、TCP またはレイヤー 4 トラフィックをルーティングするために使用されます。


バケットに対するオブジェクト作成・更新・削除などのデータ処理のイベントをトリガーとしてレプリ ケーションが実行されます。クロスリージョンレプリケーション は、異なる AWS リージョンにある２つのバケット間でオブジェクトを自動的に非同期にコピーする機能です。クロスリージョンレプリケーションは同じ AWS アカウントが所有するバケットにも、異なるアカウントが所有するバケットにも設定できます。


AWS CloudHSMを利用した鍵管理により、EUなどの各国の厳しいセキュリティ基準を満たすことができます。AWS CloudHSMは安全なキーストレージや高パフォーマンスの暗号化オペレーションを AWS アプリケーションに対して簡単に追加できるようにするクラウドベースのハードウェアセキュリティモジュール (HSM) です。AWS CloudHSM では不正使用防止策が施された HSM へのシングルテナントアクセスを利用できます。HSM は暗号化モジュール向けの FIPS 140-2 レベル 3 標準に準拠しています。


Amazon Inspector は自動化されたセキュリティ評価サービスで、AWS にデプロイしたアプリケーションのセキュリティとコンプライアンスを向上させることができます。今回の用途には利用できません。


アクセス頻度は低いですが、管理担当者からの依頼に応じて即時にデータを参照できる必要があります。
S3 One Zone-IA は、アクセスが頻繁ではないデータをコストを押させて保存するのに最適なストレージクラスです。また、データ取り出しは通常の標準クラスと同じように即時に実行可能です。複数AZにデータを保存する標準クラスやStandard-IAとは異なり、S3 One Zone-IA は単一AZにデータを保存することによってコストを節約します。 したがって、データ冗長性は劣るため、バックアップのコピーや再作成可能なデータサマリーなど、アクセスが頻繁ではないデータを低価格に保存するのに向いています。Standard-IAとOne Zone-IAとを選ぶ基準は、保存されるデータの重要度です。ログファイルなどのマスターではないデータは、One Zone-IAを利用することがユースケースとして最適であるため、本件の要件に合致します。


/24の設定により、256個のIPアドレスを利用できます（実際はAWS側で予約されているIPアドレスも含まれます。）。これは200個のIPアドレスを利用する最適なIPアドレス数です。



オプション１は不正解です。/21の設定により、2048個ののIPアドレスを利用できるため、利用できる数が多すぎます。

オプション２は不正解です。/22の設定により、1024個ののIPアドレスを利用できるため、利用できる数が多すぎます。

オプション３は不正解です。/23の設定により、512個ののIPアドレスを利用できるため、利用できる数が多すぎます。


VPCのDNS hostnamesオプションが有効化されていないと、サブネットで起動されたインスタンスはDNS名を取得できません。

VPC 内で起動したインスタンスがパブリック IP アドレスに対応するパブリック DNS ホスト名を受け取るかどうか、および Amazon DNS サーバーを通じた DNS 解決が VPCに適用されるかは、VPCの操作で決定されます。VPCのDNS hostnamesオプションを有効化するためには、 enableDnsSupport 属性を「 true」 に設定した上で、enableDnsHostnames属性を「true」に設定して、VPC 内のインスタンスがDNS ホスト名を取得可能とします。


SQSを利用して可視性タイムアウトを設定することで、特定のインスタンスにおいて一定期間キューが処理されない場合に限り、可視性タイムアウトを超過するとスポットインスタンス側でキューが見えるようになり処理が実行されるようになります。この設定により、特定のEC2インスタンスでの処理が優先されるものの、可視性タイムアウトを超過した場合にのみ、別のインスタンスによって処理されるような設定することが可能です。これにより、特定のキューに対して特定のインスタンスでの処理を優先させて、複数のインスタンスでキューが処理されるのを防ぐことができます。


このシナリオでは、Glacierにデータ保存後、ボールトへのアクセス制御をポリシーとして設定して、そのポリシーが編集できないようにすることが要件となっています。Glacier のVault Lockでは、ボールトロックポリシーを使用して、Glacier の各ボールトに対するコンプライアンス管理を簡単に適用することができます。そして、ボールトロックを適用することで、そのポリシーが編集できないように設定することが可能です。


3enインスタンスはAmazon EC2 において GB あたりの料金が最も安価なストレージ最適化インスタンスです。このインスタンスタイプは数万 IOPS もの低レイテンシーなランダム I/O オペレーションには向いていません。



バンドID、アルバムID、ソングID、作曲者IDなどのデータをキーバリューストアとドキュメントモデル形式で保存することができるのはDynamoDBです。DynamoDB は、テーブル内の属性に対してさまざまなデータ型がサポートされています。

DynamoDBが保存できるデータ型は次のように分類できます。



■スカラー型

スカラー型は 1 つの値を表すことができます。スカラー型は、数値、文字列、バイナリ、ブール、および null です。

■ドキュメント型

ドキュメント型は JSON ドキュメントなどの入れ子の属性を持つ複雑な構造を表すことができます。

■セット型

セット型は複数のスカラー値を表すことができます。セット型は、文字セット、数値セット、およびバイナリセットです。


ストレージアクセスを分析し、適切なデータを適切なストレージクラスに移行する時期を判断することが必要です。

Amazon S3 分析のストレージクラス分析により、ストレージアクセスパターンを分析し、適切なデータを適切なストレージクラスに移行すべきタイミングを判断できます。ストレージクラス分析がフィルタリングされたデータセットのアクセスパターンを一定期間監視することで、ライフサイクルポリシーを設定することができます。


キャッシュされるべきデータがエッジロケーションにないため、オリジンサーバーへのアクセスが頻発しています。

この問題はCache-Controlのmax-ageディレクティブが低い値に設定されていることが主な原因です。キャッシュ保持期間が非常に短いためリクエストは頻繁にオリジンサーバーに送信されます。通常、CloudFrontは、指定したキャッシュ期間が経過するまで、エッジロケーションからオブジェクトを処理します。

キャッシュの有効期限が切れると、エッジロケーションがオブジェクトのユーザーリクエストを取得した際に、CloudFrontはリクエストをオリジンサーバーに転送して、キャッシュに最新バージョンのオブジェクトが含まれていることを確認します。max-ageディレクティブが低いとキャッシュへの確認が短いサイクルとなり、オリジンサーバーへの確認回数が増加します。


レガシーアプリケーションはマルチキャストネットワーキングに依存しており、AWSで確実に起動させるための特別な設定が必要です。

このレガシーアプリケーションはマルチキャストネットワーキングに依存しており、AWSで確実に起動させるためには、仮想オーバレイネットワークをインスタンスのOSレベルで起動させることが求められます。したがって、レガシーアプリケーションを移行するためにオーバーレイマルチキャストを使用することが必要となります。 オーバーレイ・マルチキャストとは，クライアント・パソコンにインストールしたアプリケーション・ソフトでマルチキャスト（1対多通信）を実現する技術です。

マルチキャストは、1対多のデータ配信を可能にするネットワーク機能です。1つ以上の送信元が、通常マルチキャストグループ内に存在する加入者にネットワークパケットを送信できます。 ただし、VPCはマルチキャストまたはブロードキャストネットワーキングをサポートしていないことに注意してください。


Lambda関数は実行数に応じて支払いが発生するため、 Lambda関数が無期限に実行されないようにタイムアウト設定がなされています。 指定されたタイムアウトに達するとLambda関数は実行を終了します。そのため、予想される実行時間に基づいてタイムアウト時間を設定することが必要となります。 デフォルトのタイムアウトは3秒で、AWS Lambdaのリクエストあたりの最大実行時間は900秒です。これは15分に相当します。よって、15分を超過した処理が発生すると計算処理が途中で終了してしまいます。

このシナリオでは、データ処理は約10分～15分間実行されており、計算結果に間違いが発生しているということが問題となっています。約10分～15分間実行される処理が15分で絶対に完了するという保証はないため、15分を超過した処理は計算処理の途中で終了している可能性があります。



複数のアベイラビリティーゾーンに設置された複数のEC2インスタンスに着信要求を均等に分散するELBの設定が必要です。

ロードバランサーのノードは、クライアントからのリクエストを登録済みターゲットに分散させます。ELBのクロスゾーン負荷分散を有効とすると、ロードバランサーノードは有効なすべてのアベイラビリティーゾーンの登録済みターゲットにトラフィックを分散します。したがって、複数のアベイラビリティーゾーンにわたって全EC2インスタンスに着信要求を均等に分散することが可能となります。


AWSのVPCとオンプレミス環境とをネットワーク接続するための方法は、次のようなサービスを利用します。



・Direct Connect

・IPsec VPN接続

・AWS VPN CloudHub

・サードパーティソフトウェアのVPNアプライアンス



日本のユーザーは東京リージョンのサーバーに接続し、韓国のユーザーはソウルのサーバーに接続する必要があります。

Route53の位置情報ルーティングを使用すると、ユーザーの位置情報、つまりDNSクエリの発信位置に基づいてトラフィックを処理するリソースを選択できます。 たとえば、ヨーロッパからのすべてのクエリをノルウェー地域のELBロードバランサーにルーティングして、アジア地域のクエリは東京リージョンのELBロードバランサ―にルーティングを設定することができます。

Route 53 コンソールで地理的近接性ルーティングによりユーザーとリソース間の物理的な距離に基づいてトラフィックをルーティングできます。地理的近接性ルーティングはAWSリソース位置とユーザーの距離の2点に応じたトラフィック制御により、リージョン範囲を区分けすることが可能です。地理的近接性に基づくため国を指定するといった対応ではありません。したがって、ヨーロッパからのすべてのクエリをフランクフルトの ELB ロードバランサーにルーティングするといった処理には位置情報ルーティングを使用する方が最適です。



マルチAZ構成のAmazon　RDSでは、プライマリデータベースのインスタンスがダウンした場合に管理者の介入なしにデータベース操作をできるだけ早く再開できるように、フェールオーバーが自動的に処理されます。 フェイルオーバーすると、Amazon RDSはDBインスタンスのCNAMEレコードをスタンバイから切り替えて、新しいプライマリに昇格します。


Amazon S3にバックアップまたは保存される全データは暗号化する必要があります

法に相互に排他的な3つのオプションがあります。



・Amazon S3管理キーでサーバーサイド暗号化を使用する（SSE-S3）

・AWS KMS管理キーを使用したサーバーサイド暗号化を使用する（SSE-KMS）

・顧客提供のキーを使用してサーバーサイド暗号化を使用する（SSE-C）



SSE-S3はAES-256暗号化を使用した暗号化方式です。SSE-Cはユーザーがユーザー自身の暗号化キーを使用することを可能にします。よって、AES-256を利用するという選択が正しいです。



EC２インスタンスとデータベース間の設定にIPアドレスが利用されている場合において、Auto Scalingのターミネーションポリシーが古いEC2インスタンスから削除される設定の場合に、既存インスタンスが削除されてしまIPアドレスが変更されてしまいます。IPアドレスが切り替わってしまうため、IPアドレス指定した連携が機能しなくなってしまいます。IPアドレスが異なるため残ったっインスタンスはデータベースに接続できません。

EC２インスタンスとデータベース間の設定にIPアドレスが利用されている場合において、EC2インスタンスにElastic IPが設定されていないと、インスタンスの起動時にIPアドレスが変更されてしまうため、データベースに接続できなくなってしまいます。

AutoScaling が起動したEC2インスタンスにデータベースと関連づいたEIPが付与される設定をしていないと、これらのインスタンスがデータベースにアクセスができなくなってしまいます




オプション２が正解となります。このシナリオでは、サーバー用のOSはLinux を利用しアプリケーションを構成し、運用ダッシュボードとLinux OSのバッチ配布の自動化が必要です。AWS Elastic Beanstalk は自動的にデプロイタスク (バッチ配布の自動化、容量のプロビジョニング、負荷分散、Auto Scaling、アプリケーションのヘルスモニタリングなど) を処理します。AWS Elastic BeanstalkによりアプリケーションがホストされるAWS リソースをユーザー側で完全に制御することができます。また、Elastic Beanstalkコンソールを運用ダッシュボードとして、環境の状態とアプリケーションの状態を一目で分かるように表示することができます。



オプション１は不正解です。CloudFormationはAWSのインフラストラクチャリソースをJSONとYAMLで記述してプロビジョニングするための共通言語を提供するサービスです。これは運用管理ダッシュボードなどは提供していません。



VPCフローログを有効化することで、EC2インスタンスとネットワークインターフェイスとの間で行き来する IP トラフィック情報をキャプチャできます。このデータをCloudWacthなどで集約することで、ログの中央管理が達成できます。

オプション４が正解となります。AWS には複数アカウントや複数リージョンにわたって、ログを収集、分析、表示するための、中央ロギングソリューションが用意されています。この仕組みを構築するためには、EC2インスタンスのログファイルおよび VPC フローログをキャプチャしていく必要があります。CloudWatchエージェントを使用して Amazon EC2 インスタンスとオンプレミスサーバーからメトリクスとログを収集することができます。これにより、ログの中央管理が達成できます。


AWS CloudTrail はAWS アカウントのガバナンス、コンプライアンス、運用監査、リスク監査を行うためのサービスです。AWS CloudTrailが取得ログはユーザーのログであり、要件に合致していません。



EC2インスタンスがヘルスチェックに失敗した場合、ロードバランサーは異常なインスタンスに新しいリクエストを送信せずに、既存のリクエストの完了を許可する必要があります。

Connection Drainingは既存の接続を開いたまま、登録解除または異常なインスタンスへのCLBのリクエスト送信を停止することができます。これにより、ロードバランサーは、登録解除または異常なインスタンスに対して行われた実行中のリクエストを完了するトラフィック処理を実施します。

ロードバランサーのConnection Drainingを有効にすると、インスタンスの登録解除を報告する前に、ロードバランサーが接続を維持する最大時間を指定できます。 最大タイムアウト値は1〜3,600秒に設定できます（デフォルトは300秒です）。 最大時間制限に達すると、ロードバランサーは登録解除インスタンスへの接続を強制的に閉じます。

Amazon EC2 instance store-backed AMIを使用してEC2インスタンスを作成すると、そのインスタンスのデータはインスタンスストアに保存されます。インスタンスストアボリューム上のデータはインスタンスの存続期間中のみ持続するため、インスタンスが終了するとデータは自動的に削除されます。
Route53のフェールオーバー設定のアクティブ／アクティブ構成によって、レイテンシールーティングなどのルーティングポリシーを利用してフェールオーバーを構成することができます。その場合は、アクティブ／アクティブ構成となり、設定された全リソースを平等に利用することができます。リソースが利用できなくなると、そのリソースを Route 53 が異常として検出し、以後、クエリへの応答に含めることを控えます。



その際に、あなたはEBSボリュームの保存データは保持したいと考えています。
インスタンスを終了すると、EC2 は接続されていた各 EBS ボリュームの DeleteOnTermination 属性 を使用して、ボリュームを存続させるべきか、削除すべきかを判断します。デフォルトでは、インスタンスのルートボリュームの DeleteOnTermination 属性が有効化されており、EC２インスタンスの削除とともにEBSも削除されてしますが、その他のボリュームタイプではDeleteOnTermination 属性は非有効化されています。インスタンスが停止してもルートボリュームを維持したい場合は、ルートボリュームの DeleteOnTermination 属性を非有効化することが必要です。それによって、インスタンス削除後にデータを存続させることが可能です。



他社と物理サーバーを共有してはいけないことになっています。更に同じAWSルートアカウントに属しているとしても、部署が違うIAMアカウント同士では物理サーバーを共有することができないようにする必要があります。

Dedicated Hostは物理的にサーバーを占有するインスタンスタイプです。Dedicated Hosts では、ユーザーはライセンス条項の範囲で、ソケット単位、コア単位、または VM ソフトウェア単位の既存のライセンスを利用できます。IAMユーザーやIAMグループが同じAWSアカウントに属していたとしても、権限が異なる別のIAMユーザーやIAMグループとは物理サーバーを共有しません。



DynamoDBはリアルタイムのデータ集計処理に使用できる、耐久性、拡張性、および可用性の高いデータストアです。AppSyncを使用して、DynamoDBのデータをリアルタイムで最新の状態に保つコラボレーションアプリを簡単に構築できます。  これにより、アプリケーションはAmazon DynamoDBのデータにアクセスしたり、EC２インスタンスやAWS Lambda関数がデータ処理を実行するなどの機能を実装することができます。したがって、DynamoDBとAppSyncとを連携して、リアルタイム処理機能を実装することが可能です。
リアルタイム行動分析やランキング処理にはAppSyncを利用することが最適です。



本環境DR環境（ディザスタリカバリ）と遠隔DR環境を別リージョンに設置して、その管理をRoute53で実施することで、他の選択肢よりもAWSのマネージドサービスを利用した自動フェイルオーバーが利用可能であり、DR対応を自動化することができます。したがって、オプション２が正解となります。

Route53を利用したDR環境の方式としては主に以下の２つが考えられます。

■コールドスタンバイ

Amazon S3をバックアップデータの格納先として利用します。

事前にシステムイメージをクラウド上に準備します。

災害発生時にクラウド上のシステムを起動し、Route53で切り替えることで復旧します。

投資コストを抑えられ、手軽に始めることがで



■ウォームスタンバイ

クラウドのスタンバイ環境にデータを常時レプリケーションします。

通常は、スタンバイ環境を最少構成で稼働させ、災害発生時は必要なキャパシティに変更します。

スタンバイ環境の運用が常時必要になりますが、Route53でシステム切り替えを素早く実行することができます



自動でトラフィックが別インスタンスに切り替えられましたが、その処理は停止してしまいました。IPアドレスが変更されてしまうことが原因のようです。

EC２インスタンスにELBやRoute53を構成していると、特定のEC2インスタンスに障害が発生した際に、ダウンタイムを最小にして待機系インスタンスに切り替えます。その際にホスト名を待機系のIPアドレスに向け直すと、DNS情報が伝播するまでに一定のダウンタイムが発生する可能性があります。

これを防止するためには、フローティングIPを利用してElastic IPアドレスをフローティングすることで即時に別のEC2インスタンスへとトラフィックを切り替えることができます。障害発生時には稼動系からElastic IPアドレスを外し、待機系インスタンスに割り当て直すことで瞬時にトラフィックの向け先を変更できます。



Auto Scalingを設定して高負荷処理への対応を出来るようにしました。しかしながら、ELBのヘルスチェックが異常を示しているにも関わらず、Auto ScalingによるEC2インスタンスの起動が実行されていません。

Auto Scalingは起動したインスタンスに対して、定期的なヘルスチェックを実行します。このへルスチェックにはEC2タイプとELBタイプの2つのタイプがあります。

EC2タイプでは、EC2のステータスがrunning以外の場合、またはシステムステータスがimpairedの場合に、このインスタンスを異常と判断します。

ELBタイプでは、インスタンスのステータスチェックとELBのヘルスチェックからインスタンスの状態を判断します。

したがって、Auto ScalingがEC2タイプのヘルスチェックを利用していると、ELBのヘルスチェックが異常を示しているにも関わらず、EC2インスタンス側のステータスの問題がなければAuto Scalingが実行されません。



現在、あなたはデータ取得機能を実装しています。Lambda関数を利用したデータ取得処理機能を実装して、HTMLからアクセスして利用する予定です。

このシナリオでは、Lambda関数を利用したデータ取得処理機能を実装して、Amazon API GatewayとLambda関数を統合することで、Lambda関数をHTMLからアクセスして利用することが求められています。

API Gateway は完全マネージド型サービスでAPI の作成、配布、保守、監視、保護が可能なサービスです。AWS Lambda で実行されるコードからデータ、ビジネスロジック、機能にアクセスするための「玄関」として機能する REST API および WebSocket API を作成できます。HTMLに直接書き込んでコードを呼び出すことも可能です。



コンテナを実行する仮想マシンのクラスターをプロビジョニングやスケールなどの設定が不要な方式をとりたいと考えています。

以前は、Amazon EKSとFargateの組合せは利用できませんでしたが、2019年12月より、AWS Fargate の上でKubernetesを利用できるようになりました。Amazon EKS と Fargateはインスタンスのプロビジョニング設定などを自動で構成してくれるため、AWS 上での Kubernetes ベースのアプリケーション開発やその管理を一定程度自動化してくれます。したがって、ECSとFargateの組合せよりも Kubernetesを利用することで、より自動化を達成することが可能です。

Fargate はコンテナを実行するために仮想マシンのクラスターをプロビジョニング、設定、スケールする必要がありません。これにより、サーバータイプの選択、クラスターをスケールするタイミングの決定、クラスターのパッキングの最適化を行う必要がなくなります。



Step Functions サーバーレスのオーケストレーションサービスであり、 AWSリソースと組み合わせたワークフローを作成するサービスです。人間による操作を必要とするような長時間実行される、半自動化されたワークフローを作成することもできます。したがって、このワークフローに手動アクションを必要とするいくつかのタスクが存在する可能性があるためであり、手動アクションが処理されなければタスクは停滞することになります。



Route 53 ネームサーバーにALBを指定するために、Aliasターゲットの IP アドレスを伴う A レコード (IPv4 アドレスの場合) または AAAA レコード (IPv6 アドレスの場合) を設定します。したがって、オプション１と２が正解となります。



RDSはMyISAMはMySQLのストレージエンジンとして使用することはできません。 MySQLにおいて、推奨されるストレージエンジンはInnoDBです。ストレージエンジンとは、さまざまなテーブル型に対する SQL 操作を処理する MySQL コンポーネントです



Amazon EC2 でインスタンスを設定時にユーザーデータを設定することで、インスタンス起動時にスクリプトを実行できます。AWSではシェルスクリプトと cloud-init ディレクティブという2 つのタイプのユーザーデータを Amazon EC2 に渡すことができます。また、このデータはプレーンテキスト、ファイルまたは base64 でエンコードされたテキスト (API コールの場合) として、起動ウィザードに渡すこともできます。



SNSはマイクロサービスなどの分離を可能にする、高可用性で、耐久性に優れたセキュアな完全マネージド型 pub/sub メッセージングサービスです。プッシュ型の連携処理や通知機能の実装に利用します。

SNSはアプリケーションやコンポーネント間でのメッセージの送信と受信を繰り返す仕組みとして利用できます。SNSは pub-sub に対応しており、SNSトピックにメッセージを送信(publish)すると、トピックを購読(subscribe)しているsubscriberにメッセージが一斉配信されます。

SQSはポーリング処理を実施する際に利用されるものであり、並列処理などの分散処理時に利用するべきもので、イベントに連動したメッセージ通知にはSNSを利用することなります。




ユーザーの一時的なアクセスにはAWS STSを利用して権限を付与する仕組みを利用します。

ウェブ ID フェデレーションを使用することで、カスタムのサインインコードを作成したり、独自のユーザー ID を管理したりする必要がなくなります。その代わりに、アプリのユーザーはGoogleなどの外部 ID プロバイダーを使用してサインインすることができます。認証トークンを受け取ったら、そのトークンを AWS アカウントのリソースを使用するためのアクセス許可を持つ IAM ロールにマッピングし、AWS の一時的セキュリティ認証情報に変換することができます。IdP を使用すると、アプリケーションで長期的なセキュリティ認証情報を埋め込んで配布する必要がないため、AWS アカウントの安全性の維持に役立ちます。



DynamoDBへのデータ登録後、自動でLambda関数を起動してメタデータを登録することが望ましい構成です。そのためには、DynamoDBストリームという仕組みを使うことで、DynamoDBテーブルへのデータ登録をトリガーにしてLambda関数を起動することができます。また、Lambda関数は最大512MBまでのデータ容量を扱うことができます。したがって、オプション１が正解となります。



VPCにCIDRブロックを追加する際には以下の規則が適用されます。



- 許容ブロックサイズは、「/ 28」サブネットマスクから「/ 16」のサブネットマスクまでです。

-  CIDRブロックは、VPCに関連付けられている既存のCIDRブロックと重複してはいけません。



したがって、/ 28から/ 16までの範囲内にある168.0.0.0/27のみが正解となります。




AWS SAMは、サーバーレスアプリケーション構築用のデプロイツールです。YAMLを使用して、サーバレスアプリケーションのLambda関数、API、データベース、イベントソースマッピングをモデリングします。AWS SAMはCloudFormationと連携してサーバレスアプリケーションを展開します。その際は、SAM が SAM 構文を AWS CloudFormation 構文に変換および拡張することで、サーバーレスアプリケーションの構築を高速化することができます。


AWS Database Migration Service を使用すると、オンプレミスにあるデータベースを短期間で安全に AWS に移行できます。今回の要件には利用できません。

オプション２は間違いです。AWS Server Migration Service は、オンプレミスの VMware vSphere、Microsoft Hyper-V/SCVMM、または Azure 仮想マシンの AWSに移行するツールです。今回の要件には利用できません。

オプション４は間違いです。Amazon SWF はステップまたは連続したステップがあるバックグラウンドジョブを構築、実行、スケールすることができるクラウド内の完全マネージド型の状態トラッカーおよびワークフローシステムです。今回の要件には利用できません。



EBSのスナップショットはEBSの利用状況に関係なく、非同期に作成することができます。したがって、オプション１の「EBSボリュームを通常通りに利用することができる。」が正しい答えになります。

ポイントインタイムスナップショットはすぐに作成されますが、スナップショットのステータスはスナップショットが完了するまで保留中になり、最初のスナップショット作成には実行完了まで数時間かかることがあります。進行中のスナップショットはボリュームへの進行中の読み書きによって影響されません。それ故に、スナップショットの取得最中であっても、EBSボリュームを使用することができます。



EC2インスタンスから Amazon EBS ボリュームをデタッチするには、明示的にデタッチする必要があります。ルートボリュームの場合は、デフォルト設定ではインスタンスの削除されると同時にボリュームが削除されてしまいます。

また、インスタンスが実行中の場合、先にインスタンスからボリュームをアンマウントする必要があります。 EBS ボリュームがインスタンスのルートデバイスである場合、ボリュームをデタッチする前に、インスタンスを停止することが求められます。したがって、古いEC2インスタンスを停止した上で、ボリュームをデタッチします。



AWS IoT Core は、インターネットに接続されたデバイスから、クラウドアプリケーションやその他のデバイスに簡単かつ安全に通信するためのマネージド型クラウドサービスです。AWS IoT Coreを利用してセンサーデバイスを利用した車両管理アプリケーションを容易に構築することが可能となります。

AWS IoT Core は数十億個のデバイスと数兆件のメッセージをサポートしており、それらのメッセージを AWS エンドポイントや他のデバイスに確実かつセキュアに処理してルーティングします。AWS IoT Core を使用すれば、アプリケーションがインターネットに接続されていない場合でも、すべてのデバイスを常に追跡して通信できます。



AutoScaling のDesired capacityのインスタンス数を増加させることで、一時的なリクエスト流入増加に備えて、現在のインスタンス数を手動で増やすことができます。Desired capacityを設定することで、既存の Auto Scaling グループのサイズはいつでも手動で変更して、稼働するインスタンス数を増減させることができます。




AWSの責任共有モデルでは、AWSは次のようなセキュリティ管理するように責任があります。



- 設備

- ハードウェアの物理的セキュリティ

- ネットワークインフラ

- 仮想化インフラストラクチャ



ユーザー側は次のようなセキュリティ管理に責任が求められます。



-Amazon Machine Images（AMI）

- オペレーティングシステム

- アプリケーション

- 輸送中のデータ

- 保管時のデータ

- データストア

- 資格情報

- ポリシーと設定




このサーバーではメモリ内の大きいビッグデータデータセットをリアルタイムで処理するワークロードに対して高速なパフォーマンスを実現することが必要です。

このシナリオでは、メモリ最適化インスタンスの適切なタイプを選択することが求められています。メモリ最適化インスタンスは、メモリ内の大きいデータセットを処理するワークロードに対して高速なパフォーマンスを実現するように設計されています。

オプション３が正解となります。R5 インスタンスはメモリバウンドのワークロードに最適なインスタンスタイプです。優れたネットワークスループットおよびパケット率パフォーマンスを活用できるアプリケーションにおいて理想的なインスタンスです。

このインスタンスは、高パフォーマンスデータベース、ウェブ規模の分散型インメモリキャッシュ、中規模インメモリデータベース、リアルタイムビッグデータ分析、その他のエンタープライズアプリケーションなどに利用します。したがって、ビッグデータデータセットをリアルタイムで処理するワークロードに最適なインスタンスです。


A1 インスタンスは汎用インスタンスの１つです。スケールアウト型の Arm ベースのワークロードに最適なインスタンスタイプであり、大幅なコスト削減を実現できます。ビッグデータ処理向けのインスタンスではありません。

オプション２は不正解です。T3 インスタンスは汎用インスタンスの１つです。ベースラインレベルの CPU パフォーマンスを提供する次世代のバースト可能な汎用インスタンスタイプで、いつでも必要な時間だけ CPU 使用率をバーストさせる機能を備えています。これもビッグデータ処理向けのインスタンスではありません。

オプション４は不正解です。M5 インスタンスは汎用インスタンスの１つです。このファミリーは、バランスの取れたコンピューティング、メモリ、およびネットワークのリソースを提供し、多くのアプリケーションに適しています。これもビッグデータ処理向けのインスタンスではありません。




サインインページの URL に AWS アカウント IDではなく任意の名称を設定する場合は、アカウントのエイリアスを作成します。IAMユーザーアカウントのサインインページにエイリアスを設定すると、サインインページURLのアカウント ID と置き換わります。管理者はAWS マネジメントコンソール、AWS CLI、または AWS API を使用して、アカウントエイリアスを作成および管理できます。サインインページのデフォルトの URL は以下の形式となっています。



https://Your_AWS_Account_ID.signin.aws.amazon.com/console/ 



AWS アカウント ID に AWS アカウントエイリアスを作成すると、サインインページの URL は次のようになります。



https://Your_Alias.signin.aws.amazon.com/console/ 




Snowball はセキュリティを考慮して設計されたデバイスを使用して、ペタバイト規模のデータ転送を可能にします。このデバイスを利用してAWS クラウド内外に大容量データを転送できます。Snowball を使用すると、高いネットワークコスト、長時間かかる転送、セキュリティ面の懸念といった、大規模なデータ転送に関する一般的な課題を解決できます。データを簡単、迅速、安全に転送でき、高速インターネットによるデータ転送と比較して、コストは5 分の 1 ほどで済みます。

Snowball Edge Compute Optimized は、機械学習、フルモーション動画分析、分析、ローカルコンピューティングスタックなどのユースケースに強力なコンピューティングリソースを提供します。このデバイスは、S3 互換オブジェクトストレージまたは EBS 互換ブロックボリューム用に 42 TB の使用可能な HDD 容量を提供します。

Snowball Edge Storage Optimized デバイスは、大規模なデータ移行と定期的な転送ワークフロー、およびさらに高容量を必要とするローカルコンピューティングに適しています。Snowball Edge Storage Optimized は、ブロックボリュームと Amazon S3 互換オブジェクトストレージに 100TB の HDD 容量を提供します。しかしながら、利用可能なボリュームは80TBほどです。



したがって、100TBのデータを移行するためには、Snowball Edge Storage Optimized が少なくとも2台必要であり、他の選択肢では容量が不足しています。オプション３が正解となります。



CloudFront はユーザーに近い位置にあるエッジロケーションにキャッシュを保持することで、高速のコンテンツ配信を実施します。通常、ビューワーに最も高速に配信できるCloudFront エッジサーバーがエッジ処理を実施します。

CloudFrontはユーザーが初めてアクセスする画像については、オリジンサーバーからデータを取得して、エッジロケーションにあるCloudFrontサーバーにキャッシュを保持します。

ユーザーから再度その画像にアクセスがあった場合は、キャッシュサーバーにあるキャッシュデータを活用してユーザーに近いエッジサーバーからコンテンツを配信します。したがって、「エッジロケーション側にキャッシュとして保存されている画像にアクセスする。」が正解となります。



自社のシステムがAWSクラウドで基盤となるリソースを適切に管理できるようになります。
Amazon EC2はアンマネージド型のサービスであり、多くの管理がユーザーに委ねられています。したがって、Amazon EC2インスタンスを使用すると、ユーザーは作成したインスタンスのオペレーティングシステムにアクセスできます。

オプション２が正解となります。Amazon EMRはマネージド型のHadoopフレームワークを提供します。 しかしながら、Amazon EMRはEC2インスタンスを利用して構成されるため、Amazon EMRを構成するEC2インスタンスのオペレーティングシステムなどに、ユーザーはアクセス可能となります。


CloudFormationは１つのスタックの出力値を別のスタックに提供することで、スタック間を連動させてインフラを構成することが可能になります。スタック間で情報を共有するにはスタックの出力値をエクスポートします。スタックの出力値をエクスポートするには、スタックのテンプレートの Output セクションの Export フィールドを使用します。したがって、オプション１が正解となります。


オプション２は不正解です。CloudFormation スタックに既存のリソースをインポートすることが可能です。これはエクスポートされた出力値を別スタック側が利用する際に使われます。

